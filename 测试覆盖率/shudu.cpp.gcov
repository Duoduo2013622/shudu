        -:    0:Source:shudu.cpp
        -:    0:Graph:shudu.gcno
        -:    0:Data:shudu.gcda
        -:    0:Runs:12
        -:    1:/*****************************************************************************
        -:    2:*  xxx xxx  Co., Ltd                                                         *
        -:    3:*  Copyright (C) 2014 xxx xxx                                                * 
        -:    4:*  This program implements a Sudoku program. You can use it to generate      *
        -:    5:*  Sudoku endings to files, and read Sudoku from files and solve puzzles. In *
        -:    6:*  this program, we have used backtracking algorithm to solve sudoku problem.*                                       *
        -:    7:*                                                                            *
        -:    8:*  @file     shudu.cpp                                                       *
        -:    9:*  @brief    数独                                                            *
        -:   10:*  Details.                                                                  *
        -:   11:*                                                                            *
        -:   12:*  @author   jlx lxk                                                         *
        -:   13:*  @email    jlx0626sammi@163.com                                            *
        -:   14:*  @version  1.0.0.1(版本号)                                                  *
        -:   15:*  @date     2023-06-27                                                      *
        -:   16:*  @license  GNU General Public License (GPL)                                *
        -:   17:*                                                                            *
        -:   18:*----------------------------------------------------------------------------*
        -:   19:*  Remark         : Description                                              *
        -:   20:*----------------------------------------------------------------------------*
        -:   21:*  Change History :                                                          *
        -:   22:*   Date      |   Version | Author      | Description                        *
        -:   23:*----------------------------------------------------------------------------*
        -:   24:*  2023/06/27 | 1.0.0.1   | lxk jlx      | Create file                       *
        -:   25:*----------------------------------------------------------------------------*
        -:   26:*                                                                            *
        -:   27:*****************************************************************************/
        -:   28:
        -:   29:#include <iostream>
        -:   30:#include <fstream>
        -:   31:#include <vector>
        -:   32:#include <algorithm>
        -:   33:#include <random>
        -:   34:#include <chrono>
        -:   35:#include <cstring>
        -:   36:#include <string>
        -:   37:#include <numeric>
        -:   38:
        -:   39:
        -:   40:#define BOARD_SIZE 9
        -:   41:#define EMPTY 0
        -:   42:
        -:   43:// 检查数字是否可以放置在给定位置
    13852:   44:bool isSafe(const std::vector<std::vector<int>>& board, int row, int col, int num) {
        -:   45:    // 检查同一行或同一列中是否已存在该数字
    66729:   46:    for (int i = 0; i < BOARD_SIZE; i++) {
    63843:   47:        if (board[row][i] == num || board[i][col] == num) {
    10966:   48:            return false;
        -:   49:        }
        -:   50:    }
        -:   51:
        -:   52:    // 检查该数字是否已存在于同一 3x3 网格中
     2886:   53:    int gridStartRow = row - row % 3;
     2886:   54:    int gridStartCol = col - col % 3;
    10387:   55:    for (int i = 0; i < 3; i++) {
    30864:   56:        for (int j = 0; j < 3; j++) {
    23363:   57:            if (board[i + gridStartRow][j + gridStartCol] == num) {
      439:   58:                return false;
        -:   59:            }
        -:   60:        }
        -:   61:    }
        -:   62:
     2447:   63:    return true;
        -:   64:}
        -:   65:
        -:   66:// 使用回溯解决数独难题的功能
     2532:   67:bool solveSudoku(std::vector<std::vector<int>>& board) {
    13918:   68:    for (int row = 0; row < BOARD_SIZE; row++) {
   127328:   69:        for (int col = 0; col < BOARD_SIZE; col++) {
        -:   70:            // Find an empty cell
   115942:   71:            if (board[row][col] == EMPTY) {
        -:   72:                // Try placing numbers from 1 to 9
    14439:   73:                for (int num = 1; num <= 9; num++) {
    13852:   74:                    if (isSafe(board, row, col, num)) {
     2447:   75:                        board[row][col] = num;
        -:   76:
     2447:   77:                        if (solveSudoku(board)) {
     1860:   78:                            return true;
        -:   79:                        }
        -:   80:
      587:   81:                        board[row][col] = EMPTY;
        -:   82:                    }
        -:   83:                }
        -:   84:
      587:   85:                return false;
        -:   86:            }
        -:   87:        }
        -:   88:    }
        -:   89:
       85:   90:    return true;
        -:   91:}
        -:   92:
        -:   93:// 生成数独终局
        1:   94:void generateSudoku(int numPuzzles) {
        2:   95:    std::ofstream file("sudoku_finals.txt");
        -:   96:
        2:   97:    std::vector<int> nums(BOARD_SIZE);
        1:   98:    std::iota(nums.begin(), nums.end(), 1);
        -:   99:
        1:  100:    std::random_device rd;
        1:  101:    std::mt19937 generator(rd());
        -:  102:
        2:  103:    for (int i = 0; i < numPuzzles; i++) {
        1:  104:        auto seed = std::chrono::high_resolution_clock::now().time_since_epoch().count();
        1:  105:        std::shuffle(nums.begin(), nums.end(), std::default_random_engine(seed));
        -:  106:
        3:  107:        std::vector<std::vector<int>> board(BOARD_SIZE, std::vector<int>(BOARD_SIZE, 0));
        -:  108:
       10:  109:        for (int j = 0; j < BOARD_SIZE; j++) {
        9:  110:            board[0][j] = nums[j];
        -:  111:        }
        -:  112:
        1:  113:        solveSudoku(board);
        -:  114:
       10:  115:        for (int row = 0; row < BOARD_SIZE; row++) {
       90:  116:            for (int col = 0; col < BOARD_SIZE; col++) {
       81:  117:                file << board[row][col] << " ";
        -:  118:            }
        9:  119:            file << std::endl;
        -:  120:        }
        1:  121:        file << std::endl;
        -:  122:    }
        -:  123:
        1:  124:    file.close();
        1:  125:}
        -:  126:
        -:  127:// 生成指定数量的数独游戏，并将结果保存到文件中
        2:  128:void generateSudokuGames(int numPuzzles, int numBlank) 
        -:  129:{
        4:  130:    std::ofstream file("sudoku_puzzles.txt");
        -:  131:
        4:  132:    std::vector<int> nums(BOARD_SIZE);
        2:  133:    std::iota(nums.begin(), nums.end(), 1);
        -:  134:
        2:  135:    std::random_device rd;
        2:  136:    std::mt19937 generator(rd());
        -:  137:
        4:  138:    for (int i = 0; i < numPuzzles; i++) 
        -:  139:    {
        2:  140:        auto seed = std::chrono::high_resolution_clock::now().time_since_epoch().count();
        2:  141:        std::shuffle(nums.begin(), nums.end(), std::default_random_engine(seed));
        -:  142:
        6:  143:        std::vector<std::vector<int>> board(BOARD_SIZE, std::vector<int>(BOARD_SIZE, 0));
        -:  144:
       20:  145:        for (int j = 0; j < BOARD_SIZE; j++) 
        -:  146:        {
       18:  147:            board[0][j] = nums[j];
        -:  148:        }
        -:  149:
        2:  150:        solveSudoku(board);
        -:  151:
        -:  152:        // 挖空
       22:  153:        for (int i = 0; i < numBlank; i++)
        -:  154:        {
        -:  155:            while(1)
        -:  156:            {
       22:  157:                int r = (rand() % 9);
       22:  158:                int c = (rand() % 9);
       22:  159:                if (board[r][c] != 0)
        -:  160:                {
       20:  161:                    board[r][c] = 0;
       20:  162:                    break;
        -:  163:                }
        2:  164:            }
        -:  165:        }
        -:  166:
       20:  167:        for (int row = 0; row < BOARD_SIZE; row++) 
        -:  168:        {
      180:  169:            for (int col = 0; col < BOARD_SIZE; col++) 
        -:  170:            {
      162:  171:                if (board[row][col]==0) {
       20:  172:                    file << "$ ";
       20:  173:                    continue;
        -:  174:                }
      142:  175:                file << board[row][col] << " ";
        -:  176:            }
       18:  177:            file << std::endl;
        -:  178:        }
        2:  179:        file << std::endl;
        -:  180:    }
        -:  181:
        2:  182:    file.close();
        2:  183:}
        -:  184:
        -:  185:// 生成指定数量的数独游戏，设置挖空范围，并将结果保存到文件中
        1:  186:void generateSudokuGames_r(int numPuzzles, int a ,int b) 
        -:  187:{
        2:  188:    std::ofstream file("sudoku_puzzles.txt");
        -:  189:
        2:  190:    std::vector<int> nums(BOARD_SIZE);
        1:  191:    std::iota(nums.begin(), nums.end(), 1);
        -:  192:
        1:  193:    std::random_device rd;
        1:  194:    std::mt19937 generator(rd());
        -:  195:
        2:  196:    for (int i = 0; i < numPuzzles; i++) 
        -:  197:    {
        1:  198:        auto seed = std::chrono::high_resolution_clock::now().time_since_epoch().count();
        1:  199:        std::shuffle(nums.begin(), nums.end(), std::default_random_engine(seed));
        -:  200:
        3:  201:        std::vector<std::vector<int>> board(BOARD_SIZE, std::vector<int>(BOARD_SIZE, 0));
        -:  202:
       10:  203:        for (int j = 0; j < BOARD_SIZE; j++) 
        -:  204:        {
        9:  205:            board[0][j] = nums[j];
        -:  206:        }
        -:  207:
        1:  208:        solveSudoku(board);
        -:  209:
        -:  210:        // 挖空
        1:  211:        int numBlank = (rand() % (b-a+1))+ a;
        1:  212:        file << "numBlank = " << numBlank << std::endl;
       22:  213:        for (int i = 0; i < numBlank; i++)
        -:  214:        {
        -:  215:            while(1)
        -:  216:            {
       22:  217:                int r = (rand() % 9);
       22:  218:                int c = (rand() % 9);
       22:  219:                if (board[r][c] != 0)
        -:  220:                {
       21:  221:                    board[r][c] = 0;
       21:  222:                    break;
        -:  223:                }
        1:  224:            }
        -:  225:        }
        -:  226:
       10:  227:        for (int row = 0; row < BOARD_SIZE; row++) 
        -:  228:        {
       90:  229:            for (int col = 0; col < BOARD_SIZE; col++) 
        -:  230:            {
       81:  231:                if (board[row][col]==0) {
       21:  232:                    file << "$ ";
       21:  233:                    continue;
        -:  234:                }
       60:  235:                file << board[row][col] << " ";
        -:  236:            }
        9:  237:            file << std::endl;
        -:  238:        }
        1:  239:        file << std::endl;
        -:  240:    }
        -:  241:
        1:  242:    file.close();
        1:  243:}
        -:  244:
        -:  245:// 生成指定数量的数独游戏，设置挖空范围，并将结果保存到文件中
        1:  246:void generateSudokuGames_u(int numPuzzles) 
        -:  247:{
        2:  248:    std::ofstream file("sudoku_puzzles.txt");
        -:  249:
        2:  250:    std::vector<int> nums(BOARD_SIZE);
        1:  251:    std::iota(nums.begin(), nums.end(), 1);
        -:  252:
        1:  253:    std::random_device rd;
        1:  254:    std::mt19937 generator(rd());
        -:  255:
        2:  256:    for (int i = 0; i < numPuzzles; i++) 
        -:  257:    {
        1:  258:        auto seed = std::chrono::high_resolution_clock::now().time_since_epoch().count();
        1:  259:        std::shuffle(nums.begin(), nums.end(), std::default_random_engine(seed));
        -:  260:
        3:  261:        std::vector<std::vector<int>> board(BOARD_SIZE, std::vector<int>(BOARD_SIZE, 0));
        -:  262:
       10:  263:        for (int j = 0; j < BOARD_SIZE; j++) 
        -:  264:        {
        9:  265:            board[0][j] = nums[j];
        -:  266:        }
        -:  267:
        1:  268:        solveSudoku(board);
        -:  269:
        -:  270:        // 默认挖空30个
        -:  271:
        1:  272:        int numBlank = 30;
       31:  273:        for (int i = 0; i < numBlank; i++)
        -:  274:        {
        -:  275:            while(1)
        -:  276:            {
       39:  277:                int r = (rand() % 9);
       39:  278:                int c = (rand() % 9);
       39:  279:                if (board[r][c] != 0)
        -:  280:                {
       30:  281:                    board[r][c] = 0;
       30:  282:                    break;
        -:  283:                }
        9:  284:            }
        -:  285:        }
        -:  286:
        -:  287:        //判断是否唯一解
        2:  288:        std::vector<std::pair<int, int>> empty_cells;
       10:  289:        for (int row = 0; row < 9; row++) {
       90:  290:            for (int col = 0; col < 9; col++) {
       81:  291:                if (board[row][col] == 0) {
       30:  292:                    empty_cells.push_back(std::make_pair(row, col));
        -:  293:                }
        -:  294:            }
        -:  295:        }
        -:  296:    
        -:  297:    
       31:  298:        for (int i = 0; i < empty_cells.size(); i++) {
       30:  299:            int row = empty_cells[i].first;
       30:  300:            int col = empty_cells[i].second;
       30:  301:            int prev_num = board[row][col];
       30:  302:            board[row][col] = 0;
        -:  303:        
       60:  304:            std::vector<std::vector<int>> temp_board = board;
       30:  305:            solveSudoku(temp_board);
        -:  306:        
       30:  307:            bool unique_solution = true;
       30:  308:            if (solveSudoku(temp_board)) {
       30:  309:                unique_solution = false;
        -:  310:            }
        -:  311:        
       30:  312:            if (!unique_solution) {
       30:  313:                board[row][col] = prev_num;
        -:  314:            }
        -:  315:        }
        -:  316:
       10:  317:        for (int row = 0; row < BOARD_SIZE; row++) 
        -:  318:        {
       90:  319:            for (int col = 0; col < BOARD_SIZE; col++) 
        -:  320:            {
       81:  321:                if (board[row][col]==0) {
       30:  322:                    file << "$ ";
       30:  323:                    continue;
        -:  324:                }
       51:  325:                file << board[row][col] << " ";
        -:  326:            }
        9:  327:            file << std::endl;
        -:  328:        }
        1:  329:        file << std::endl;
        -:  330:    }
        -:  331:
        1:  332:    file.close();
        1:  333:}
        -:  334:
        -:  335:// 从文件中读取和解决数独谜题
        2:  336:void solveSudokuFromFile(const char* path) {
        2:  337:    std::ifstream file(path);
        2:  338:    if (!file) {
        1:  339:        std::cout << "File not found." << std::endl;
        1:  340:        return;
        -:  341:    }
        -:  342:
        2:  343:    std::ofstream file2("sudoku_solved.txt");
        -:  344:
        2:  345:    std::string line;
        3:  346:    std::vector<std::vector<int>> board(BOARD_SIZE, std::vector<int>(BOARD_SIZE, 0));
        -:  347:
        1:  348:    int row = 0;
        -:  349:
      201:  350:    while (std::getline(file, line)) {
      200:  351:        if (line.empty()) {
       20:  352:            row=0;
       20:  353:            continue;
        -:  354:        }
        -:  355:
      180:  356:        char* token = strtok(const_cast<char*>(line.c_str()), " ");
     1800:  357:        while (token != nullptr) {
     1620:  358:            if ( *token == '$'){
      600:  359:                *token = '0';
        -:  360:            }
     1620:  361:            board[row / BOARD_SIZE][row % BOARD_SIZE] = std::atoi(token);
     1620:  362:            token = strtok(nullptr, " ");
     1620:  363:            row++;
        -:  364:        }
        -:  365:
      180:  366:        if (row == BOARD_SIZE * BOARD_SIZE) {
       20:  367:            solveSudoku(board);
        -:  368:
      200:  369:            for (int row = 0; row < BOARD_SIZE; row++) {
     1800:  370:                for (int col = 0; col < BOARD_SIZE; col++) {
     1620:  371:                    file2 << board[row][col] << " ";
        -:  372:                }
      180:  373:                file2 << std::endl;
        -:  374:            }
       20:  375:            file2 << std::endl;
        -:  376:
       20:  377:            board = std::vector<std::vector<int>>(BOARD_SIZE, std::vector<int>(BOARD_SIZE, 0));
        -:  378:        }
        -:  379:    }
        -:  380:
        1:  381:    file.close();
        1:  382:    file2.close();
        -:  383:}
        -:  384:
       12:  385:int main(int argc, char* argv[]) {
       12:  386:    if (argc == 3 && strcmp(argv[1], "-c") == 0) 
        -:  387:    {
        2:  388:        int numFinals = std::atoi(argv[2]);
        2:  389:        if (numFinals<1 || numFinals>1000000){
        1:  390:            std::cout << "The number of finals can only be set in the range of 1-1000000." << std::endl;
        1:  391:            return 0;
        -:  392:        }
        1:  393:        generateSudoku(numFinals);
        1:  394:        std::cout << "Sudoku Finals generated successfully." << std::endl;
        -:  395:    } 
       10:  396:    else if (argc == 3 && strcmp(argv[1], "-s") == 0) 
        -:  397:    {
        2:  398:        solveSudokuFromFile(argv[2]);
        2:  399:        std::cout << "Sudoku games were successfully completed." << std::endl;
        -:  400:    } 
        8:  401:    else if (strcmp(argv[1], "-n") == 0)
        -:  402:    {
        7:  403:        int numPuzzles = std::stoi(argv[2]);
        7:  404:        if (numPuzzles<1 || numPuzzles>10000){
        1:  405:            std::cout << "The number of puzzles can only be set in the range of 1-10000." << std::endl;
        1:  406:            return 0;
        -:  407:        }
        -:  408:        //难度，挖空个数参数缺省  Difficulty Rating
        6:  409:        if(argc == 3)
        -:  410:        {
        1:  411:             generateSudokuGames(numPuzzles, 10); //默认挖空10个 难度等级为1
        -:  412:        }
        -:  413:        else
        -:  414:        {
        5:  415:            if(strcmp(argv[3], "-m") == 0)
        -:  416:            {
        2:  417:                int Level = std::stoi(argv[4])*10;
        2:  418:                if (Level<10 || Level>30){
        1:  419:                    std::cout << "The difficulty Rating can only be set in the range of 1-3." << std::endl;
        1:  420:                    return 0;
        -:  421:                }
        1:  422:                generateSudokuGames(numPuzzles, Level);
        -:  423:            }
        3:  424:            else if (strcmp(argv[3], "-r") == 0)
        -:  425:            {
        -:  426:                //Usage: shudu.exe -n 20 -r 20~55
        -:  427:                //解析出输入字符串的个数
        2:  428:	            int longer = strlen(argv[4]);
        -:  429:                
        -:  430:	            //printf("longer = %d !\n",longer);
        -:  431:	
        -:  432:	            //解析出字符串中的数字 -- 数组实现
        2:  433:                int a=0,b=0;
       12:  434:	            for(int i = 0 ; i < longer ; i++)
        -:  435:	            {
       10:  436:		            if((argv[4][i] >= '0')&&(argv[4][i] <= '9'))
        -:  437:		            {
        8:  438:			            b = b*10 + argv[4][i] - '0';
        -:  439:		            }
        2:  440:                    else if (argv[4][i] == '~'){
        2:  441:                        a = b;
        2:  442:                        b = 0;
        -:  443:                    }
        -:  444:	            }
        -:  445:
        -:  446:                //int a = std::stoi(argv[4]);
        -:  447:                //int b = std::stoi(argv[5]);
        2:  448:                if (a>b || b>55 || a<20){
        1:  449:                    std::cout << "The number of blanks can only be set in the range of 20-55." << std::endl;
        1:  450:                    return 0;
        -:  451:                }
        1:  452:                generateSudokuGames_r(numPuzzles, a,b);
        -:  453:            }
        1:  454:            else if(strcmp(argv[3], "-u") == 0)
        -:  455:            {
        1:  456:                generateSudokuGames_u(numPuzzles);
        -:  457:            }    
        -:  458:        }
        4:  459:        std::cout << "Sudoku games generated successfully." << std::endl;
        -:  460:    }
        -:  461:
        -:  462:
        -:  463:
        -:  464:
        -:  465:
        -:  466:    else 
        -:  467:    {
        1:  468:        std::cout << "Invalid command-line arguments." << std::endl;
        1:  469:        std::cout << "Usage: shudu.exe -c numPuzzles" << std::endl;
        1:  470:        std::cout << "       shudu.exe -s path_of_file" << std::endl;
        -:  471:    }
        -:  472:
        8:  473:    return 0;
        -:  474:}
